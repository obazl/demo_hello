module(
    name = "obazl_hello",
    version = "0.1.0",
    compatibility_level = 0,
)

bazel_dep(name = "rules_ocaml", version = "3.0.0.dev")
bazel_dep(name = "tools_opam", version = "1.0.0.dev")

opam = use_extension("@tools_opam//extensions:opam.bzl", "opam")
opam.deps(
    # toolchain = "xdg", # (default) | "local" | "global"
    # opam_version is ignored unless toolchain = "xdg"
    # opam_version = "2.2.1", # default: "2.3.0"
    # ocaml_version = "5.1.0", # default: "5.3.0"
    # debug = 2,
    # verbosity = 2,
    # opam_verbosity = 2,
    pkgs = {"ounit2": "2.2.7"}
)
use_repo(opam, "opam", "opam.ocamlsdk")
## always register toolchains:
register_toolchains("@opam.ocamlsdk//toolchain/selectors/local:all")
register_toolchains("@opam.ocamlsdk//toolchain/profiles:all")

# direct deps:
use_repo(opam, "opam.ounit2")

## Repos generated by this extension always use the
## "opam." prefix, yielding e.g. tools_opam++opam+opam.ounit2
## but you can use any alias within your module to refer to them.
## E.g. given
## use_repo(opam, ounit2 = "opam.ounit2")
## then @ounit2 will resolve to tools_opam++opam+opam.ounit2.
## In the following case your build files would have
## to use @foobar instead of @opam.ounit2
# use_repo(opam, foobar = "opam.ounit2")

